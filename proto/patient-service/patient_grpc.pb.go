// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/patient-service/patient.proto

package patient_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PatientService_RegisterPatient_FullMethodName          = "/patientservice.PatientService/RegisterPatient"
	PatientService_GetPatientDetails_FullMethodName        = "/patientservice.PatientService/GetPatientDetails"
	PatientService_UpdatePatientDetails_FullMethodName     = "/patientservice.PatientService/UpdatePatientDetails"
	PatientService_AddMedicalRecord_FullMethodName         = "/patientservice.PatientService/AddMedicalRecord"
	PatientService_GetPatientMedicalHistory_FullMethodName = "/patientservice.PatientService/GetPatientMedicalHistory"
)

// PatientServiceClient is the client API for PatientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientServiceClient interface {
	RegisterPatient(ctx context.Context, in *RegisterPatientRequest, opts ...grpc.CallOption) (*RegisterPatientResponse, error)
	GetPatientDetails(ctx context.Context, in *GetPatientDetailsRequest, opts ...grpc.CallOption) (*GetPatientDetailsResponse, error)
	UpdatePatientDetails(ctx context.Context, in *UpdatePatientDetailsRequest, opts ...grpc.CallOption) (*UpdatePatientDetailsResponse, error)
	AddMedicalRecord(ctx context.Context, in *AddMedicalRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPatientMedicalHistory(ctx context.Context, in *GetPatientMedicalHistoryRequest, opts ...grpc.CallOption) (*GetPatientMedicalHistoryResponse, error)
}

type patientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientServiceClient(cc grpc.ClientConnInterface) PatientServiceClient {
	return &patientServiceClient{cc}
}

func (c *patientServiceClient) RegisterPatient(ctx context.Context, in *RegisterPatientRequest, opts ...grpc.CallOption) (*RegisterPatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPatientResponse)
	err := c.cc.Invoke(ctx, PatientService_RegisterPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientDetails(ctx context.Context, in *GetPatientDetailsRequest, opts ...grpc.CallOption) (*GetPatientDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientDetailsResponse)
	err := c.cc.Invoke(ctx, PatientService_GetPatientDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) UpdatePatientDetails(ctx context.Context, in *UpdatePatientDetailsRequest, opts ...grpc.CallOption) (*UpdatePatientDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePatientDetailsResponse)
	err := c.cc.Invoke(ctx, PatientService_UpdatePatientDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) AddMedicalRecord(ctx context.Context, in *AddMedicalRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PatientService_AddMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientMedicalHistory(ctx context.Context, in *GetPatientMedicalHistoryRequest, opts ...grpc.CallOption) (*GetPatientMedicalHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientMedicalHistoryResponse)
	err := c.cc.Invoke(ctx, PatientService_GetPatientMedicalHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServiceServer is the server API for PatientService service.
// All implementations must embed UnimplementedPatientServiceServer
// for forward compatibility.
type PatientServiceServer interface {
	RegisterPatient(context.Context, *RegisterPatientRequest) (*RegisterPatientResponse, error)
	GetPatientDetails(context.Context, *GetPatientDetailsRequest) (*GetPatientDetailsResponse, error)
	UpdatePatientDetails(context.Context, *UpdatePatientDetailsRequest) (*UpdatePatientDetailsResponse, error)
	AddMedicalRecord(context.Context, *AddMedicalRecordRequest) (*emptypb.Empty, error)
	GetPatientMedicalHistory(context.Context, *GetPatientMedicalHistoryRequest) (*GetPatientMedicalHistoryResponse, error)
	mustEmbedUnimplementedPatientServiceServer()
}

// UnimplementedPatientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPatientServiceServer struct{}

func (UnimplementedPatientServiceServer) RegisterPatient(context.Context, *RegisterPatientRequest) (*RegisterPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPatient not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientDetails(context.Context, *GetPatientDetailsRequest) (*GetPatientDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientDetails not implemented")
}
func (UnimplementedPatientServiceServer) UpdatePatientDetails(context.Context, *UpdatePatientDetailsRequest) (*UpdatePatientDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientDetails not implemented")
}
func (UnimplementedPatientServiceServer) AddMedicalRecord(context.Context, *AddMedicalRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMedicalRecord not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientMedicalHistory(context.Context, *GetPatientMedicalHistoryRequest) (*GetPatientMedicalHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientMedicalHistory not implemented")
}
func (UnimplementedPatientServiceServer) mustEmbedUnimplementedPatientServiceServer() {}
func (UnimplementedPatientServiceServer) testEmbeddedByValue()                        {}

// UnsafePatientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientServiceServer will
// result in compilation errors.
type UnsafePatientServiceServer interface {
	mustEmbedUnimplementedPatientServiceServer()
}

func RegisterPatientServiceServer(s grpc.ServiceRegistrar, srv PatientServiceServer) {
	// If the following call pancis, it indicates UnimplementedPatientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PatientService_ServiceDesc, srv)
}

func _PatientService_RegisterPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).RegisterPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_RegisterPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).RegisterPatient(ctx, req.(*RegisterPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_GetPatientDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientDetails(ctx, req.(*GetPatientDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_UpdatePatientDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).UpdatePatientDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_UpdatePatientDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).UpdatePatientDetails(ctx, req.(*UpdatePatientDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_AddMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).AddMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_AddMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).AddMedicalRecord(ctx, req.(*AddMedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientMedicalHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientMedicalHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientMedicalHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_GetPatientMedicalHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientMedicalHistory(ctx, req.(*GetPatientMedicalHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientService_ServiceDesc is the grpc.ServiceDesc for PatientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "patientservice.PatientService",
	HandlerType: (*PatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPatient",
			Handler:    _PatientService_RegisterPatient_Handler,
		},
		{
			MethodName: "GetPatientDetails",
			Handler:    _PatientService_GetPatientDetails_Handler,
		},
		{
			MethodName: "UpdatePatientDetails",
			Handler:    _PatientService_UpdatePatientDetails_Handler,
		},
		{
			MethodName: "AddMedicalRecord",
			Handler:    _PatientService_AddMedicalRecord_Handler,
		},
		{
			MethodName: "GetPatientMedicalHistory",
			Handler:    _PatientService_GetPatientMedicalHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/patient-service/patient.proto",
}
