// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/appointment-service/appointment.proto

package appointment_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppointmentService_ScheduleAppointment_FullMethodName       = "/appointmentservice.AppointmentService/ScheduleAppointment"
	AppointmentService_GetAppointmentDetails_FullMethodName     = "/appointmentservice.AppointmentService/GetAppointmentDetails"
	AppointmentService_UpdateAppointmentStatus_FullMethodName   = "/appointmentservice.AppointmentService/UpdateAppointmentStatus"
	AppointmentService_RescheduleAppointment_FullMethodName     = "/appointmentservice.AppointmentService/RescheduleAppointment"
	AppointmentService_CancelAppointment_FullMethodName         = "/appointmentservice.AppointmentService/CancelAppointment"
	AppointmentService_GetAppointmentsForPatient_FullMethodName = "/appointmentservice.AppointmentService/GetAppointmentsForPatient"
	AppointmentService_GetAppointmentsForDoctor_FullMethodName  = "/appointmentservice.AppointmentService/GetAppointmentsForDoctor"
)

// AppointmentServiceClient is the client API for AppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppointmentServiceClient interface {
	ScheduleAppointment(ctx context.Context, in *ScheduleAppointmentRequest, opts ...grpc.CallOption) (*ScheduleAppointmentResponse, error)
	GetAppointmentDetails(ctx context.Context, in *GetAppointmentDetailsRequest, opts ...grpc.CallOption) (*GetAppointmentDetailsResponse, error)
	UpdateAppointmentStatus(ctx context.Context, in *UpdateAppointmentStatusRequest, opts ...grpc.CallOption) (*UpdateAppointmentStatusResponse, error)
	RescheduleAppointment(ctx context.Context, in *RescheduleAppointmentRequest, opts ...grpc.CallOption) (*RescheduleAppointmentResponse, error)
	CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAppointmentsForPatient(ctx context.Context, in *GetAppointmentsForPatientRequest, opts ...grpc.CallOption) (*GetAppointmentsForPatientResponse, error)
	GetAppointmentsForDoctor(ctx context.Context, in *GetAppointmentsForDoctorRequest, opts ...grpc.CallOption) (*GetAppointmentsForDoctorResponse, error)
}

type appointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentServiceClient(cc grpc.ClientConnInterface) AppointmentServiceClient {
	return &appointmentServiceClient{cc}
}

func (c *appointmentServiceClient) ScheduleAppointment(ctx context.Context, in *ScheduleAppointmentRequest, opts ...grpc.CallOption) (*ScheduleAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ScheduleAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointmentDetails(ctx context.Context, in *GetAppointmentDetailsRequest, opts ...grpc.CallOption) (*GetAppointmentDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentDetailsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetAppointmentDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdateAppointmentStatus(ctx context.Context, in *UpdateAppointmentStatusRequest, opts ...grpc.CallOption) (*UpdateAppointmentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppointmentStatusResponse)
	err := c.cc.Invoke(ctx, AppointmentService_UpdateAppointmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) RescheduleAppointment(ctx context.Context, in *RescheduleAppointmentRequest, opts ...grpc.CallOption) (*RescheduleAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RescheduleAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_RescheduleAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) CancelAppointment(ctx context.Context, in *CancelAppointmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppointmentService_CancelAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointmentsForPatient(ctx context.Context, in *GetAppointmentsForPatientRequest, opts ...grpc.CallOption) (*GetAppointmentsForPatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentsForPatientResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetAppointmentsForPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointmentsForDoctor(ctx context.Context, in *GetAppointmentsForDoctorRequest, opts ...grpc.CallOption) (*GetAppointmentsForDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentsForDoctorResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetAppointmentsForDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServiceServer is the server API for AppointmentService service.
// All implementations must embed UnimplementedAppointmentServiceServer
// for forward compatibility.
type AppointmentServiceServer interface {
	ScheduleAppointment(context.Context, *ScheduleAppointmentRequest) (*ScheduleAppointmentResponse, error)
	GetAppointmentDetails(context.Context, *GetAppointmentDetailsRequest) (*GetAppointmentDetailsResponse, error)
	UpdateAppointmentStatus(context.Context, *UpdateAppointmentStatusRequest) (*UpdateAppointmentStatusResponse, error)
	RescheduleAppointment(context.Context, *RescheduleAppointmentRequest) (*RescheduleAppointmentResponse, error)
	CancelAppointment(context.Context, *CancelAppointmentRequest) (*emptypb.Empty, error)
	GetAppointmentsForPatient(context.Context, *GetAppointmentsForPatientRequest) (*GetAppointmentsForPatientResponse, error)
	GetAppointmentsForDoctor(context.Context, *GetAppointmentsForDoctorRequest) (*GetAppointmentsForDoctorResponse, error)
	mustEmbedUnimplementedAppointmentServiceServer()
}

// UnimplementedAppointmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppointmentServiceServer struct{}

func (UnimplementedAppointmentServiceServer) ScheduleAppointment(context.Context, *ScheduleAppointmentRequest) (*ScheduleAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) GetAppointmentDetails(context.Context, *GetAppointmentDetailsRequest) (*GetAppointmentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentDetails not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdateAppointmentStatus(context.Context, *UpdateAppointmentStatusRequest) (*UpdateAppointmentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentStatus not implemented")
}
func (UnimplementedAppointmentServiceServer) RescheduleAppointment(context.Context, *RescheduleAppointmentRequest) (*RescheduleAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) CancelAppointment(context.Context, *CancelAppointmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) GetAppointmentsForPatient(context.Context, *GetAppointmentsForPatientRequest) (*GetAppointmentsForPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentsForPatient not implemented")
}
func (UnimplementedAppointmentServiceServer) GetAppointmentsForDoctor(context.Context, *GetAppointmentsForDoctorRequest) (*GetAppointmentsForDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentsForDoctor not implemented")
}
func (UnimplementedAppointmentServiceServer) mustEmbedUnimplementedAppointmentServiceServer() {}
func (UnimplementedAppointmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentServiceServer will
// result in compilation errors.
type UnsafeAppointmentServiceServer interface {
	mustEmbedUnimplementedAppointmentServiceServer()
}

func RegisterAppointmentServiceServer(s grpc.ServiceRegistrar, srv AppointmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppointmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppointmentService_ServiceDesc, srv)
}

func _AppointmentService_ScheduleAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ScheduleAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ScheduleAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ScheduleAppointment(ctx, req.(*ScheduleAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointmentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointmentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetAppointmentDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointmentDetails(ctx, req.(*GetAppointmentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdateAppointmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdateAppointmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdateAppointmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdateAppointmentStatus(ctx, req.(*UpdateAppointmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_RescheduleAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RescheduleAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).RescheduleAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_RescheduleAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).RescheduleAppointment(ctx, req.(*RescheduleAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_CancelAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CancelAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CancelAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CancelAppointment(ctx, req.(*CancelAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointmentsForPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentsForPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointmentsForPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetAppointmentsForPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointmentsForPatient(ctx, req.(*GetAppointmentsForPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointmentsForDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentsForDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointmentsForDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetAppointmentsForDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointmentsForDoctor(ctx, req.(*GetAppointmentsForDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentService_ServiceDesc is the grpc.ServiceDesc for AppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appointmentservice.AppointmentService",
	HandlerType: (*AppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleAppointment",
			Handler:    _AppointmentService_ScheduleAppointment_Handler,
		},
		{
			MethodName: "GetAppointmentDetails",
			Handler:    _AppointmentService_GetAppointmentDetails_Handler,
		},
		{
			MethodName: "UpdateAppointmentStatus",
			Handler:    _AppointmentService_UpdateAppointmentStatus_Handler,
		},
		{
			MethodName: "RescheduleAppointment",
			Handler:    _AppointmentService_RescheduleAppointment_Handler,
		},
		{
			MethodName: "CancelAppointment",
			Handler:    _AppointmentService_CancelAppointment_Handler,
		},
		{
			MethodName: "GetAppointmentsForPatient",
			Handler:    _AppointmentService_GetAppointmentsForPatient_Handler,
		},
		{
			MethodName: "GetAppointmentsForDoctor",
			Handler:    _AppointmentService_GetAppointmentsForDoctor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/appointment-service/appointment.proto",
}
