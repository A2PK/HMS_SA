// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/staff-service/staff.proto

package staff_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StaffService_AddStaff_FullMethodName              = "/staffservice.StaffService/AddStaff"
	StaffService_GetStaffDetails_FullMethodName       = "/staffservice.StaffService/GetStaffDetails"
	StaffService_ListStaff_FullMethodName             = "/staffservice.StaffService/ListStaff"
	StaffService_UpdateStaffDetails_FullMethodName    = "/staffservice.StaffService/UpdateStaffDetails"
	StaffService_UpdateStaffSchedule_FullMethodName   = "/staffservice.StaffService/UpdateStaffSchedule"
	StaffService_SetStaffAvailability_FullMethodName  = "/staffservice.StaffService/SetStaffAvailability"
	StaffService_GetDoctorAvailability_FullMethodName = "/staffservice.StaffService/GetDoctorAvailability"
	StaffService_AssignTask_FullMethodName            = "/staffservice.StaffService/AssignTask"
	StaffService_TrackWorkload_FullMethodName         = "/staffservice.StaffService/TrackWorkload"
	StaffService_ListTasks_FullMethodName             = "/staffservice.StaffService/ListTasks"
	StaffService_AddStaffRole_FullMethodName          = "/staffservice.StaffService/AddStaffRole"
	StaffService_ListStaffRoles_FullMethodName        = "/staffservice.StaffService/ListStaffRoles"
	StaffService_AddStaffStatus_FullMethodName        = "/staffservice.StaffService/AddStaffStatus"
	StaffService_ListStaffStatuses_FullMethodName     = "/staffservice.StaffService/ListStaffStatuses"
	StaffService_AddTaskStatus_FullMethodName         = "/staffservice.StaffService/AddTaskStatus"
	StaffService_ListTaskStatuses_FullMethodName      = "/staffservice.StaffService/ListTaskStatuses"
)

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceClient interface {
	// Staff Management
	AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*AddStaffResponse, error)
	GetStaffDetails(ctx context.Context, in *GetStaffDetailsRequest, opts ...grpc.CallOption) (*GetStaffDetailsResponse, error)
	ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error)
	UpdateStaffDetails(ctx context.Context, in *UpdateStaffDetailsRequest, opts ...grpc.CallOption) (*UpdateStaffDetailsResponse, error)
	// Restored APIs (Implementation needs careful review based on new entities)
	UpdateStaffSchedule(ctx context.Context, in *UpdateStaffScheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetStaffAvailability(ctx context.Context, in *SetStaffAvailabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDoctorAvailability(ctx context.Context, in *GetDoctorAvailabilityRequest, opts ...grpc.CallOption) (*GetDoctorAvailabilityResponse, error)
	AssignTask(ctx context.Context, in *AssignTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TrackWorkload(ctx context.Context, in *TrackWorkloadRequest, opts ...grpc.CallOption) (*TrackWorkloadResponse, error)
	// Add ListTasks RPC
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// Lookup Table Management
	AddStaffRole(ctx context.Context, in *AddStaffRoleRequest, opts ...grpc.CallOption) (*AddStaffRoleResponse, error)
	ListStaffRoles(ctx context.Context, in *ListStaffRolesRequest, opts ...grpc.CallOption) (*ListStaffRolesResponse, error)
	AddStaffStatus(ctx context.Context, in *AddStaffStatusRequest, opts ...grpc.CallOption) (*AddStaffStatusResponse, error)
	ListStaffStatuses(ctx context.Context, in *ListStaffStatusesRequest, opts ...grpc.CallOption) (*ListStaffStatusesResponse, error)
	AddTaskStatus(ctx context.Context, in *AddTaskStatusRequest, opts ...grpc.CallOption) (*AddTaskStatusResponse, error)
	ListTaskStatuses(ctx context.Context, in *ListTaskStatusesRequest, opts ...grpc.CallOption) (*ListTaskStatusesResponse, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*AddStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffResponse)
	err := c.cc.Invoke(ctx, StaffService_AddStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetStaffDetails(ctx context.Context, in *GetStaffDetailsRequest, opts ...grpc.CallOption) (*GetStaffDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaffDetailsResponse)
	err := c.cc.Invoke(ctx, StaffService_GetStaffDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffResponse)
	err := c.cc.Invoke(ctx, StaffService_ListStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateStaffDetails(ctx context.Context, in *UpdateStaffDetailsRequest, opts ...grpc.CallOption) (*UpdateStaffDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStaffDetailsResponse)
	err := c.cc.Invoke(ctx, StaffService_UpdateStaffDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateStaffSchedule(ctx context.Context, in *UpdateStaffScheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StaffService_UpdateStaffSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) SetStaffAvailability(ctx context.Context, in *SetStaffAvailabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StaffService_SetStaffAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetDoctorAvailability(ctx context.Context, in *GetDoctorAvailabilityRequest, opts ...grpc.CallOption) (*GetDoctorAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorAvailabilityResponse)
	err := c.cc.Invoke(ctx, StaffService_GetDoctorAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) AssignTask(ctx context.Context, in *AssignTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StaffService_AssignTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) TrackWorkload(ctx context.Context, in *TrackWorkloadRequest, opts ...grpc.CallOption) (*TrackWorkloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackWorkloadResponse)
	err := c.cc.Invoke(ctx, StaffService_TrackWorkload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, StaffService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) AddStaffRole(ctx context.Context, in *AddStaffRoleRequest, opts ...grpc.CallOption) (*AddStaffRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffRoleResponse)
	err := c.cc.Invoke(ctx, StaffService_AddStaffRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListStaffRoles(ctx context.Context, in *ListStaffRolesRequest, opts ...grpc.CallOption) (*ListStaffRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffRolesResponse)
	err := c.cc.Invoke(ctx, StaffService_ListStaffRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) AddStaffStatus(ctx context.Context, in *AddStaffStatusRequest, opts ...grpc.CallOption) (*AddStaffStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffStatusResponse)
	err := c.cc.Invoke(ctx, StaffService_AddStaffStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListStaffStatuses(ctx context.Context, in *ListStaffStatusesRequest, opts ...grpc.CallOption) (*ListStaffStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffStatusesResponse)
	err := c.cc.Invoke(ctx, StaffService_ListStaffStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) AddTaskStatus(ctx context.Context, in *AddTaskStatusRequest, opts ...grpc.CallOption) (*AddTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskStatusResponse)
	err := c.cc.Invoke(ctx, StaffService_AddTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListTaskStatuses(ctx context.Context, in *ListTaskStatusesRequest, opts ...grpc.CallOption) (*ListTaskStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTaskStatusesResponse)
	err := c.cc.Invoke(ctx, StaffService_ListTaskStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations must embed UnimplementedStaffServiceServer
// for forward compatibility.
type StaffServiceServer interface {
	// Staff Management
	AddStaff(context.Context, *AddStaffRequest) (*AddStaffResponse, error)
	GetStaffDetails(context.Context, *GetStaffDetailsRequest) (*GetStaffDetailsResponse, error)
	ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error)
	UpdateStaffDetails(context.Context, *UpdateStaffDetailsRequest) (*UpdateStaffDetailsResponse, error)
	// Restored APIs (Implementation needs careful review based on new entities)
	UpdateStaffSchedule(context.Context, *UpdateStaffScheduleRequest) (*emptypb.Empty, error)
	SetStaffAvailability(context.Context, *SetStaffAvailabilityRequest) (*emptypb.Empty, error)
	GetDoctorAvailability(context.Context, *GetDoctorAvailabilityRequest) (*GetDoctorAvailabilityResponse, error)
	AssignTask(context.Context, *AssignTaskRequest) (*emptypb.Empty, error)
	TrackWorkload(context.Context, *TrackWorkloadRequest) (*TrackWorkloadResponse, error)
	// Add ListTasks RPC
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// Lookup Table Management
	AddStaffRole(context.Context, *AddStaffRoleRequest) (*AddStaffRoleResponse, error)
	ListStaffRoles(context.Context, *ListStaffRolesRequest) (*ListStaffRolesResponse, error)
	AddStaffStatus(context.Context, *AddStaffStatusRequest) (*AddStaffStatusResponse, error)
	ListStaffStatuses(context.Context, *ListStaffStatusesRequest) (*ListStaffStatusesResponse, error)
	AddTaskStatus(context.Context, *AddTaskStatusRequest) (*AddTaskStatusResponse, error)
	ListTaskStatuses(context.Context, *ListTaskStatusesRequest) (*ListTaskStatusesResponse, error)
	mustEmbedUnimplementedStaffServiceServer()
}

// UnimplementedStaffServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStaffServiceServer struct{}

func (UnimplementedStaffServiceServer) AddStaff(context.Context, *AddStaffRequest) (*AddStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaff not implemented")
}
func (UnimplementedStaffServiceServer) GetStaffDetails(context.Context, *GetStaffDetailsRequest) (*GetStaffDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffDetails not implemented")
}
func (UnimplementedStaffServiceServer) ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaff not implemented")
}
func (UnimplementedStaffServiceServer) UpdateStaffDetails(context.Context, *UpdateStaffDetailsRequest) (*UpdateStaffDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaffDetails not implemented")
}
func (UnimplementedStaffServiceServer) UpdateStaffSchedule(context.Context, *UpdateStaffScheduleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaffSchedule not implemented")
}
func (UnimplementedStaffServiceServer) SetStaffAvailability(context.Context, *SetStaffAvailabilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStaffAvailability not implemented")
}
func (UnimplementedStaffServiceServer) GetDoctorAvailability(context.Context, *GetDoctorAvailabilityRequest) (*GetDoctorAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorAvailability not implemented")
}
func (UnimplementedStaffServiceServer) AssignTask(context.Context, *AssignTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTask not implemented")
}
func (UnimplementedStaffServiceServer) TrackWorkload(context.Context, *TrackWorkloadRequest) (*TrackWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackWorkload not implemented")
}
func (UnimplementedStaffServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedStaffServiceServer) AddStaffRole(context.Context, *AddStaffRoleRequest) (*AddStaffRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffRole not implemented")
}
func (UnimplementedStaffServiceServer) ListStaffRoles(context.Context, *ListStaffRolesRequest) (*ListStaffRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffRoles not implemented")
}
func (UnimplementedStaffServiceServer) AddStaffStatus(context.Context, *AddStaffStatusRequest) (*AddStaffStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffStatus not implemented")
}
func (UnimplementedStaffServiceServer) ListStaffStatuses(context.Context, *ListStaffStatusesRequest) (*ListStaffStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffStatuses not implemented")
}
func (UnimplementedStaffServiceServer) AddTaskStatus(context.Context, *AddTaskStatusRequest) (*AddTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskStatus not implemented")
}
func (UnimplementedStaffServiceServer) ListTaskStatuses(context.Context, *ListTaskStatusesRequest) (*ListTaskStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskStatuses not implemented")
}
func (UnimplementedStaffServiceServer) mustEmbedUnimplementedStaffServiceServer() {}
func (UnimplementedStaffServiceServer) testEmbeddedByValue()                      {}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	// If the following call pancis, it indicates UnimplementedStaffServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StaffService_ServiceDesc, srv)
}

func _StaffService_AddStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).AddStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_AddStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).AddStaff(ctx, req.(*AddStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetStaffDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetStaffDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetStaffDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetStaffDetails(ctx, req.(*GetStaffDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ListStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListStaff(ctx, req.(*ListStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateStaffDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateStaffDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_UpdateStaffDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateStaffDetails(ctx, req.(*UpdateStaffDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateStaffSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateStaffSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_UpdateStaffSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateStaffSchedule(ctx, req.(*UpdateStaffScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_SetStaffAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStaffAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).SetStaffAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_SetStaffAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).SetStaffAvailability(ctx, req.(*SetStaffAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetDoctorAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetDoctorAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetDoctorAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetDoctorAvailability(ctx, req.(*GetDoctorAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_AssignTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).AssignTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_AssignTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).AssignTask(ctx, req.(*AssignTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_TrackWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).TrackWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_TrackWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).TrackWorkload(ctx, req.(*TrackWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_AddStaffRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).AddStaffRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_AddStaffRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).AddStaffRole(ctx, req.(*AddStaffRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListStaffRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListStaffRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ListStaffRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListStaffRoles(ctx, req.(*ListStaffRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_AddStaffStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).AddStaffStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_AddStaffStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).AddStaffStatus(ctx, req.(*AddStaffStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListStaffStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListStaffStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ListStaffStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListStaffStatuses(ctx, req.(*ListStaffStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_AddTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).AddTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_AddTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).AddTaskStatus(ctx, req.(*AddTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListTaskStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListTaskStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ListTaskStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListTaskStatuses(ctx, req.(*ListTaskStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffService_ServiceDesc is the grpc.ServiceDesc for StaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staffservice.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStaff",
			Handler:    _StaffService_AddStaff_Handler,
		},
		{
			MethodName: "GetStaffDetails",
			Handler:    _StaffService_GetStaffDetails_Handler,
		},
		{
			MethodName: "ListStaff",
			Handler:    _StaffService_ListStaff_Handler,
		},
		{
			MethodName: "UpdateStaffDetails",
			Handler:    _StaffService_UpdateStaffDetails_Handler,
		},
		{
			MethodName: "UpdateStaffSchedule",
			Handler:    _StaffService_UpdateStaffSchedule_Handler,
		},
		{
			MethodName: "SetStaffAvailability",
			Handler:    _StaffService_SetStaffAvailability_Handler,
		},
		{
			MethodName: "GetDoctorAvailability",
			Handler:    _StaffService_GetDoctorAvailability_Handler,
		},
		{
			MethodName: "AssignTask",
			Handler:    _StaffService_AssignTask_Handler,
		},
		{
			MethodName: "TrackWorkload",
			Handler:    _StaffService_TrackWorkload_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _StaffService_ListTasks_Handler,
		},
		{
			MethodName: "AddStaffRole",
			Handler:    _StaffService_AddStaffRole_Handler,
		},
		{
			MethodName: "ListStaffRoles",
			Handler:    _StaffService_ListStaffRoles_Handler,
		},
		{
			MethodName: "AddStaffStatus",
			Handler:    _StaffService_AddStaffStatus_Handler,
		},
		{
			MethodName: "ListStaffStatuses",
			Handler:    _StaffService_ListStaffStatuses_Handler,
		},
		{
			MethodName: "AddTaskStatus",
			Handler:    _StaffService_AddTaskStatus_Handler,
		},
		{
			MethodName: "ListTaskStatuses",
			Handler:    _StaffService_ListTaskStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/staff-service/staff.proto",
}
